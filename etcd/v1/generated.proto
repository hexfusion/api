
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.openshift.api.etcd.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

message ClusterMemberConfig {
  // Initial cluster configuration for bootstrapping. The value will be a comma delimted string
  // containing a list of etcd peers in the format <name>=<address>.
  optional string initialCluster = 2;
}

// ClusterMemberRequest describes a request to join the cluster by a potential etcd cluster member.
message ClusterMemberRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The membership request itself.
  // +optional
  optional ClusterMemberRequestSpec spec = 2;

  // Derived information about the request.
  // +optional
  optional ClusterMemberRequestStatus status = 3;
}

message ClusterMemberRequestCondition {
  // request approval state, currently Approved, Delivered, Denied or Pending.
  optional string type = 1;

  // brief reason for the request state
  // +optional
  optional string reason = 2;

  // human readable message with details about the request state
  // +optional
  optional string message = 3;

  // timestamp for the last update to this condition
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;
}

// ClusterMemberRequestList is a collection of ClusterMemberRequests
message ClusterMemberRequestList {
  // Standard object's metadata.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is the list of ClusterMemberRequests
  repeated ClusterMemberRequest items = 2;
}

// ClusterMemberRequestSpec defines an individual etcd cluster member request.
message ClusterMemberRequestSpec {
  // Name of the etcd peer member requesting membership.
  optional string name = 1;

  // PeerlURLs is comma seperated string including the members PeerURLs.
  // +optional
  optional string peerUrls = 2;
}

message ClusterMemberRequestStatus {
  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated ClusterMemberRequestCondition conditions = 1;

  // If request was approved, the controller will place the populated config here.
  // +optional
  optional ClusterMemberConfig config = 2;
}

